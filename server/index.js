const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const http = require("http");
const https = require("https");
const fs = require("fs");
const socketIo = require("socket.io");
const PORT = process.env.PORT || 3001;
const authRoutes = require("./routes/authRoutes");

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    // origin: "*",
    origin: "http://localhost:5173", // Use front-end's URL
    methods: ["GET", "POST"],
  },
});
app.use(express.json());
app.use(
  cors({
    origin: "*",
  })
);
// app.use(cors());

// MongoDB Connection
mongoose.connect("mongodb://localhost:27017/FypRecruitmentWebApp");

// Serve React App
app.get("/", (req, res) => {});

// Use the authRoutes
app.use("/api", authRoutes); // Using '/api' as base route

// ****** WEB RTC SIGNALING SERVER *****************

// Object to track if the interview has been started by the company
const interviewStates = {};

// Object to track the latest offer for each room
const roomOffers = {};

// Object to track ICE candidates for each room
const roomCandidates = {};

// Socket.io for WebRTC signaling
io.on("connection", (socket) => {
  console.log("A user connected: ", socket.id);

  socket.on("join-room", ({ roomId, userType }) => {
    console.log(`${socket.id} (${userType}) joined room ${roomId}`);
    socket.join(roomId);
    socket.roomId = roomId; // Store roomId in the socket object

    // Check if the company has already started the interview
    if (interviewStates[roomId]?.started) {
      socket.emit("company-started-interview");

      // Resend the offer to the candidate if available
      if (userType === "candidate" && roomOffers[roomId]) {
        socket.emit("offer", roomOffers[roomId]);
      }
    }

    // If the company joins and ICE candidates were already generated by the candidate, send them
    if (userType === "company" && roomCandidates[roomId]) {
      roomCandidates[roomId].forEach((candidate) => {
        socket.emit("ice-candidate", candidate);
      });
    }
  });

  socket.on("start-interview", ({ roomId }) => {
    if (!interviewStates[roomId]?.started) {
      interviewStates[roomId] = { started: true };
      io.to(roomId).emit("company-started-interview");
    }
  });

  socket.on("offer", ({ roomId, offer }) => {
    // Store the offer for the room
    roomOffers[roomId] = offer;
    // socket.to(roomId).emit("offer", offer);
    socket.broadcast.to(roomId).emit("offer", offer);
  });

  socket.on("answer", ({ roomId, answer }) => {
    // socket.to(roomId).emit("answer", answer);
    socket.broadcast.to(roomId).emit("answer", answer);
  });

  socket.on("ice-candidate", ({ roomId, candidate }) => {
    if (!roomCandidates[roomId]) {
      roomCandidates[roomId] = [];
    }
    roomCandidates[roomId].push(candidate);
    // socket.to(roomId).emit("ice-candidate", candidate);
    socket.broadcast.to(roomId).emit("ice-candidate", candidate);
  });

  socket.on("end-interview", ({ roomId }) => {
    // if (interviewStates[roomId]?.started) {
    //   io.to(roomId).emit("interview-ended");
    //   delete interviewStates[roomId];
    // }
    io.to(roomId).emit("end-interview");
    delete interviewStates[roomId];
    delete roomOffers[roomId];
    delete roomCandidates[roomId];
    io.in(roomId).socketsLeave(roomId);
  });

  socket.on("disconnect", (reason) => {
    const roomId = socket.roomId;
    if (roomId) {
      const roomSize = io.sockets.adapter.rooms.get(roomId)?.size || 0;
      console.log(`Room ${roomId} size after disconnect: ${roomSize}`);

      if (roomSize === 0) {
        // Clean up the room data
        delete roomCandidates[roomId];
        delete roomOffers[roomId];
        delete interviewStates[roomId];
        console.log(`Cleaned up data for room ${roomId}`);

        // Verify the deletion
        console.log(`roomCandidates[${roomId}]:`, roomCandidates[roomId]);
        console.log(`roomOffers[${roomId}]:`, roomOffers[roomId]);
        console.log(`interviewStates[${roomId}]:`, interviewStates[roomId]);
      }
    }
    console.log(`User disconnected: ${socket.id}, Reason: ${reason}`);
  });
});

server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

// app.listen(PORT, () => {
//   console.log(`Server is running on port ${PORT}`);
// });
